



import uvicorn
import torch
import matplotlib.pyplot as plt
import os
import requests
#import io
from app.generate_image import generate_image
from app.get_bytes_value import get_bytes_value
from fastapi import FastAPI
from PIL import Image 
from fastapi import Response
from optimum.intel import OVStableDiffusionPipeline
from app.utils import logger
from app.crop_image import crop_image


logger = logger.get_logger()
app = FastAPI()

batch_size = 1
num_images_per_prompt = 1
height = 256
width = 256

model_id = "app/model"
dirs = ['text_encoder', 'unet', 'vae_decoder']
stable_diffusion = OVStableDiffusionPipeline.from_pretrained(model_id)
# Statically reshape the model
stable_diffusion.reshape(batch_size=batch_size, height=height, width=width, num_images_per_prompt=num_images_per_prompt)
# Compile the model before the first inference
stable_diffusion.compile()


#@app.get('/')
@app.get(
        "/image",

        # Set what the media type will be in the autogenerated OpenAPI specification.
        # fastapi.tiangolo.com/advanced/additional-responses/#additional-media-types-for-the-main-response
        responses = {
            200: {
                "content": {"image/png": {}}
                  }
        },

        # Prevent FastAPI from adding "application/json" as an additional
        # response media type in the autogenerated OpenAPI specification.
        response_class=Response
)
def get_image(text: str):
    if len(text) == 0:
        return {'error': 'Nothing to predict'}
    try:
        for dr in dirs:
            path_to_dir = os.path.join(model_id,dr)
            for file in os.listdir(path_to_dir):
                if file.endswith('.blob'):
                    os.remove(os.path.join(path_to_dir,file))                            
        prompt = text 

        neg_prompt = 'poorly rendered face, poorly drawn face, poor facial details, poorly drawn hands, poorly rendered hands'
        # Run inference
        images = stable_diffusion(prompt, height=height, width=width, num_images_per_prompt=num_images_per_prompt, negative_prompt=neg_prompt, num_inference_steps=30).images

        image = crop_image(prompt, images[0])
        img_byte_arr = get_bytes_value(image)

        response = requests.post(
                    'https://api.remove.bg/v1.0/removebg',
                    headers={'X-Api-Key': 'Ph43Ffo4Fsa6mhaE1ia5696A'},
                    files={'image_file': img_byte_arr},
                    data={'size': 'auto'},
                                )

        return Response(content=response.content, media_type='image/png')
    except Exception as e:
        logger.error(e)
        return {'response': '-1'}
                

if __name__ == "__main__":
        uvicorn.run("main:app", host='0.0.0.0', port=9100, reload=True)
